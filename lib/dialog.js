var Emitter = require('events').EventEmitter ;
var util = require('util') ;
var assert = require('assert') ;
var noop = require('node-noop').noop;
var only = require('only') ;
var methods = require('sip-methods') ;
var debug = require('debug')('drachtio-srf') ;

/**
 * Arguments provided to Dialog constructor.
 * @typedef {Object} Dialog~Options
 * @property {Object} req drachtio Request (only provided when creating a 'uas' dialogs)
 * @property {Object} res drachtio Response
 * @property {Object} [sent] - uas only: actual Response sent when confirming the dialog
 */

/**
 * SIP Dialog
 * @constructor
 * @param {Srf} srf - Srf instance that created this dialog
 * @param {string} type - type of SIP dialog: 'uac', or 'uas'
 * @param {Dialog~Options} opts 
 */
function Dialog( srf, type, opts ) {
  var types = ['uas','uac'] ;
  assert.ok( -1 !== types.indexOf(type), 'argument \'type\' must be one of ' + types.join(',')) ;

  if (!(this instanceof Dialog)) { return new Dialog( srf, type, opts ); }

  Emitter.call(this); 

  this.srf = srf ;
  this.type = type ;
  this.req = opts.req ;
  this.res = opts.res ;
  this.agent = this.res.agent ;
  this.onHold = false ;

  /**
   * sip properties that uniquely identify this Dialog
   * @type {Dialog~SipInfo}
   */
  this.sip = {
    callId: this.req.get('Call-ID'),
    remoteTag: 'uas' === type ? this.req.getParsedHeader('from').params.tag : this.res.getParsedHeader('to').params.tag,
    localTag: 'uas' === type ? opts.sent.getParsedHeader('to').params.tag : this.req.getParsedHeader('from').params.tag
  } ;

  /**
   * local side of the Dialog
   * @type {Dialog~SipEndpointInfo}
   */
  this.local = {
    uri: 'uas' === type ? opts.sent.getParsedHeader('Contact')[0].uri : this.req.uri,
    sdp: 'uas' === type ? opts.sent.body : this.req.body
  } ;

  /**
   * local side of the Dialog
   * @type {Dialog~SipEndpointInfo}
   */
  this.remote = {
    uri: 'uas' === type ? this.req.getParsedHeader('Contact')[0].uri : this.res.getParsedHeader('Contact')[0].uri,
    sdp: 'uas' === type ? this.req.body : this.res.body
  } ;

  Object.defineProperty(this, 'id',  {
    get: function() {
      return this.res.stackDialogId ;
    }
  }) ;

  this.srf.addDialog(this) ; 
}
util.inherits(Dialog, Emitter) ;

module.exports = exports = Dialog ;

/**
 * destroy the sip dialog by generating a BYE request
 * @param {Dialog~requestCallback=} cb      callback that returns the generated BYE message
 */
Dialog.prototype.destroy = function(cb) {
  cb = cb || noop ;
  var self = this ;
  this.agent.request({
    method: 'BYE',
    stackDialogId: self.id
  }, function(err, bye) {
    self.srf.removeDialog( self ) ;
    cb(err, bye) ;
  }) ;
} ;

/**
 * modify the dialog session by changing attributes of the media connection
 * @param  {string} sdp - 'hold', 'unhold', or a session description protocol
 * @param  {Dialog~modifySessionCallback} [cb] - callback invoked when operation has completed
 */
Dialog.prototype.modifySession = function( sdp, cb ) {
  var reInvite = true ;

  cb = cb || noop ;

  switch(sdp) {
    case 'hold':
      this.local.sdp = this.local.sdp.replace(/a=sendrecv/,'a=inactive') ;
      debug('hold sdp: ', this.local.sdp) ;
      this.onHold = true ;
      break ;
    case 'unhold':
      if( this.onHold ) {
        this.local.sdp = this.local.sdp.replace(/a=inactive/,'a=sendrecv') ;
      }
      else {
        reInvite = false ;
        console.error('Dialog#modifySession: attempt to \'unhold\' session which is not on hold');
      }
      break ;
    default:
      this.local.sdp = sdp ;
      break ;
  }
  
  if( reInvite ) {
    this.agent.request({
      method: 'INVITE',
      stackDialogId: this.id,
      body: this.local.sdp
    }, function(err, req) {
      req.on('response', function(res, ack) {
        if( res.status >= 200 ) {
          ack() ;
          if( 200 === res.status ) { return cb(null); }
          cb(res.status) ;
        }
      }) ;
    }) ;
  }
} ;
/**
 * This callback provides the response a modifySession request.
 * @callback Dialog~modifySessionCallback
 * @param {Error} err  non-success sip response code received from far end
 */

/**
 * send a request within a dialog
 * @param  {Dialog~requestOptions}   opts - configuration options
 * @param  {Dialog~requestCallback} [cb]  - callback invoked when operation has completed
 */
Dialog.prototype.request = function(opts, cb) {
  assert.ok( typeof opts.method === 'string' && -1 !== methods.indexOf(opts.method), '\'opts.method\' is required and must be a SIP method') ;

  var self = this ;
  var method = opts.method.toUpperCase() ;
  cb = cb || noop ;

  this.agent.request({
    method: method,
    stackDialogId: this.id,
    headers: opts.headers || {},
    body: opts.body
  }, function( err, req ) {
    req.on('response', function( res, ack ) {
      if( 'BYE' === method ) {
        self.srf.removeDialog(self) ;
      }
      if( res.status >= 200 ) {
        if( 'INVITE' === method ) { ack() ; }
        
        cb( null, res ) ;
      }
    }) ;
  }) ;
} ;
/**
 * @typedef {Object} Dialog~requestOptions
 * @property {String} method - SIP method to use for the request
 */
/**
 * This callback provides the response to a sip request sent within the dialog.
 * @callback Dialog~requestCallback
 * @param {Error} err - error, if any
 * @param {Response} response -  response received from the far end
 */

methods.forEach( function( method ) {
  Dialog.prototype[method] = function( opts, cb ) {
    opts = opts || {} ;
    opts.method = method ;
    return this.request( opts, cb ) ;
  };
}) ;

/**
 * This callback provides the SIP request that was generated
 * @callback Dialog~requestCallback
 * @param {Error} err   error returned on non-success
 * @param {Request} req Request that was generated
 */


Dialog.prototype.handle = function( req, res ) {
  debug('Dialog handling message: ', req.method) ;
  switch( req.method ) {
    case 'BYE': 
      this.srf.removeDialog( this ) ;
      res.send(200) ;
      this.emit('destroy', {
        msg: req.msg
      }) ;
      break ;

    case 'INVITE':
      var remoteSdp = req.body ;
      debug('received re-INVITE with remote SDP: %s', remoteSdp) ;
      res.send(200, {
        body: this.local.sdp
      }) ;
      this.emit('modifySession', remoteSdp) ;
      break ;

    case 'INFO':
    case 'NOTIFY':
      res.send(200) ;
      break ;

    default:
      console.error('Dialog#handle unhandled method: %s', req.method) ;
  }
  this.emit('msg:' + req.method.toLowerCase(), req.msg) ;
} ;

//representation
Dialog.prototype.toJSON = function() {
  return( only( this, 'id type sip local remote onHold')) ;
} ;
Dialog.prototype.toString = function() {
  return this.toJSON().toString() ;
} ;

/**
 * SIP Dialog identifiers
 * @typedef {Object} Dialog~SipInfo
 * @property {String} callId - SIP Call-ID
 * @property {String} localTag - tag generated by local side of the Dialog
 * @property {String} remoteTag  - tag generated by the remote side of the Dialog
 */
/**
 * SIP Endpoint identifiers
 * @typedef {Object} Dialog~SipEndpointInfo
 * @property {String} uri - sip 
 * @property {String} sdp - session description protocol
 */
/**
 * destroy event triggered when the Dialog is torn down from the far end
 * @event Dialog#destroy
 */
/**
 * sessionModify event triggered when the far end modifies the session
 * @event Dialog#modifySession
 * @param {string} sdp - new session description protocol offered by the far end
 */

